# -*- coding: utf-8 -*-
"""resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2w8K7jfFVVejsJJqSkk_uOjGkBqu11X
"""

from keras.layers import Input, Add, Dense, Activation, BatchNormalization, Flatten, Conv2D, Dropout
from keras.models import Model, load_model
from keras.initializers import glorot_uniform, zeros
import tensorflow as tf
from tensorflow import keras
import numpy as np
import cv2
from sklearn.model_selection import train_test_split



class resnet():
  
  def __init__(self):
    self.n_input = 64
    self.n_channel = 3
    self.n_classes = 2
    self.n_resnet_blocks = 3
   
  def resnet_block(self, input_data, filters_num1,filters_num2, filters_size, stride, block_num, ds = False):
    x_shortcut = input_data
    x = Conv2D(filters_num1, (filters_size, filters_size), padding='valid',strides =(2,2),kernel_initializer=glorot_uniform(seed=27), bias_initializer = zeros())(input_data)
    x = BatchNormalization()(x)
    x = Activation('relu')(x)
    # x = Dropout(0.4)(x)

    x = Conv2D(filters_num2, (filters_size, filters_size), padding='same', kernel_initializer=glorot_uniform(seed=27), bias_initializer = zeros(), activation=None)(x)
    x = BatchNormalization()(x)

    if ds :
      x_shortcut = Conv2D(1, (filters_size, filters_size), padding='valid',strides =(2,2),kernel_initializer=glorot_uniform(seed=27), bias_initializer = zeros(), activation=None)(x_shortcut)
    x = Add()([x, x_shortcut])
    x = Activation('relu')(x)
    x = Dropout(0.25)(x)
    return x
  
  def build_resnet(self) :
    
    seed = 27
    inputs = Input(shape=(self.n_input, self.n_input, self.n_channel))
    #block1
    block1output = self.resnet_block(inputs, 32, 64, 7, 3, 1, True)
    #block2
    block2output = self.resnet_block(block1output, 64, 128, 5, 16, 2, True)
    #block3
    block3output = self.resnet_block(block2output, 128, 256,3, 16, 3, True)

    flatten_result = Flatten()(block3output)
    # x = Dropout(0.3)(flatten_result)
    outputs = Dense(self.n_classes, activation='softmax',kernel_initializer=glorot_uniform(seed=seed),bias_initializer = zeros())(flatten_result)
    resnet_model = Model(inputs, outputs)

  
    return resnet_model


#reas data
# all_img = []
# y = []
# for i in range(0, 615) :
#   img = cv2.imread('/content/yes/yes'+str(i)+'.jpg')
#   if img is  None:
#       continue
#   else:
#     y.append([1,0])
#     all_img.append(img)
#
# for i in range(0, 571) :
#   img = cv2.imread('/content/no/no'+str(i)+'.jpg')
#   if img is  None:
#       continue
#   else:
#     y.append([0,1])
#     all_img.append(img)
#
# #splite to train, val, test
# X_train, X_test, y_train, y_test = train_test_split(all_img, y, test_size=0.09, shuffle = True, random_state = 7)
# X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, shuffle = True, random_state = 7)
#
# X_train = np.array(X_train)
# y_train = np.array(y_train)
# y_test = np.array(y_test)
# X_test = np.array(X_test)
# y_val = np.array(y_val)
# X_val = np.array(X_val)
# X_train = X_train/255
# X_test = X_test/255
# X_val = X_val/255
#
# # start resnet
# resnet_class = resnet()
# opt = tf.keras.optimizers.SGD(learning_rate=0.001)
# model = resnet_class.build_resnet()
# model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['accuracy'])
# model.fit(X_train, y_train, epochs = 25, validation_data=(X_val,y_val), batch_size = 16, verbose=0)
# results = model.evaluate(X_test, y_test, batch_size=16, verbose=0)
# print("acc in test data :", results[1])
#
#
# for i in range(len(model.layers)):
# 	layer = model.layers[i]
# 	if 'conv' not in layer.name:
# 		continue
# 	print(i, layer.name, layer.output.shape)
#
# model1 = Model(inputs=model.inputs, outputs=model.layers[1].output)
# img = X_train[3].reshape(1,64,64,3)
# feature_maps = model1.predict(img)
# square = 8
# ix = 1
# for _ in range(4):
# 	for _ in range(square):
# 		ax = pyplot.subplot(4, square, ix)
# 		ax.set_xticks([])
# 		ax.set_yticks([])
# 		pyplot.imshow(feature_maps[0, :, :, ix-1], cmap='gray', aspect='auto')
# 		ix += 1
# pyplot.show()
